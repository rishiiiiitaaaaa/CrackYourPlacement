class Solution {
public:
    void findParenthesis(int n, int L, int R, vector<string>& ans, string &temp){
        //Base Case 
        if(L==n && R==n){
            ans.push_back(temp);
            return;
        }
        //Left-->(
        if(L<=n && R<=L){
            temp.push_back('(');
            findParenthesis(n,L+1,R,ans,temp);
            temp.pop_back();
        }  
        //Right-->)
        if(R<=n && R<=L){
            temp.push_back(')');
            findParenthesis(n,L,R+1,ans,temp);
            temp.pop_back();
        }  
    }
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string temp;
        findParenthesis(n,0,0,ans,temp);
        return ans;
    }
};
